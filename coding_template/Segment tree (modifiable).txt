const int N = 2e5+10;
int a[N];
int tree[4*N];
void build(int node, int st, int en) {
    if (st == en) {
        tree[node] = a[st];
        return;
    }
    int mid = (st + en) / 2;
    build(2 * node, st, mid);
    build(2 * node + 1, mid + 1, en);
    tree[node]=tree[2*node]+tree[2*node+1];
}
int query(int node,int st,int en,int l,int r){
    if(st>r || en<l){
        return 0;
    }
    if(st>=l && en<=r){
        return tree[node];
    }
    int mid = (st+en)/2;
    int q1 = query(2*node,st,mid,l,r);
    int q2 = query(2*node+1,mid+1,en,l,r);
    return q1+q2;
}
void update(int node,int st,int en,int idx,int val){
    if(st==en){
        a[st]=val;
        tree[node]=val;
        return;
    }
    int mid = (st+en)/2;
    if(idx<=mid){
        update(2*node,st,mid,idx,val);
    }
    else{
        update(2*node+1,mid+1,en,idx,val);
    }
    tree[node]=tree[2*node]+tree[2*node+1];
}